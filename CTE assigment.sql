use mavenmovies;
--- Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have acted in from the actor and film_actor tables --
 
with  actorfilmcounts as (
select 
a.actor_id,
Concat(a.first_name, '' , a.last_name) as actor_name,
count(fa.film_id) as film_count 
from 
actor a
left join
film_actor  fa on a.actor_id = fa.actor_id
group by 
a.actor_id, a.first_name, a.last_name
)
select 
actor_name, 
 film_count 
 from 
 actorfilmcounts
 order by film_count desc;
 
 -- Recursive CTE Use a recursive CTE to generate a hierarchical list of categories and their subcategories from the category table in Sakila --
with recursive categoryhierarchical as (
-- anchor member : select thr top level categories 
select
category_id,
name,
last_update,
cast( name as char(1000) ) as hierarchical_path
from 
category 
where 
last_update is null
union all
-- recursive memnber: select subcategories
select 
c.category_id,
        c.name,
        c.last_update,
        CONCAT(ch.hierarchical_path, ' > ', c.category_id) AS hierarchical_path
    FROM 
        category c
    INNER JOIN 
        Categoryhierarchical ch ON c.last_update = ch.category_id
)

-- Final select to get the hierarchical list
SELECT 
    category_id,
     name,
    last_update,
    hierarchical_path
FROM 
    categoryhierarchical
ORDER BY 
   hierarchical_path;
-- CTE with Joins Create a CTE that combines information from the film and language tables to display the film title, language name, and rental rate
with film as (
select 
f.TITLE as film_id,
l.language_id,
f.rental_rate
from 
film f
 INNER join
 language l ON f.language_id = l.language_id
)
SELECT 
film_id,
language_id,
rental_rate
FROM
Film
order by
film_id;

-- CTE for Aggregation Write a query using a CTE to find the total revenue generated by each customer (sum of payments) from the customer and payment tables --
WITH CustomerRevenue AS (
    SELECT 
        c.customer_id,
        CONCAT(c.first_name, ' ', c.last_name) AS full_name,
        SUM(p.amount) AS total_revenue
    FROM 
        customer c
    LEFT JOIN 
        payment p ON c.customer_id = p.customer_id
    GROUP BY 
        c.customer_id, c.first_name, c.last_name
)

-- Final select to display the customer name and total revenue
SELECT 
    full_name,
    total_revenue
FROM 
    CustomerRevenue
ORDER BY 
    total_revenue DESC;
    
    --- CTE with Window Functions Utilize a CTE with a window function to rank films based on their rental duration from the film table --
    WITH RankedFilms AS (
    SELECT 
        film_id,
        title,
        rental_duration,
        RANK() OVER (ORDER BY rental_duration DESC) AS 
    FROM 
        film
)

-- final select to display the films along with their rank based on rental duration
SELECT 
    film_id,
    title,
    rental_duration,
    rank
FROM 
    RankedFilms
ORDER BY 
    rank;

-- CTE and Filtering Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer table to retrieve additional customer details --
WITH CustomerRentalCounts AS (
    SELECT 
        customer_id,
        COUNT(*) AS rental_count
    FROM 
        payment
    GROUP BY 
        customer_id
    HAVING 
        COUNT(*) > 2
)
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    crc.rental_count
FROM 
    CustomerRentalCounts crc
JOIN 
    customer c ON crc.customer_id = c.customer_id
ORDER BY 
    crc.rental_count DESC;
-- CTE for Date Calculations Write a query using a CTE to find the total number of rentals made each month, considering the rental_date from the rental table --
 WITH MonthlyRentals AS (
    SELECT 
        DATE_FORMAT(rental_date, '%Y-%m') AS rental_month, -- Format date as 'YYYY-MM'
        COUNT(*) AS total_rentals
    FROM 
        rental
    GROUP BY 
        DATE_FORMAT(rental_date, '%Y-%m') -- Group by the formatted month
)
SELECT 
    rental_month,
    total_rentals
FROM 
    MonthlyRentals
ORDER BY 
    rental_month;
-- CTE for Pivot Operations Use a CTE to pivot the data from the payment table to display the total payments made by each customer in separate columns for different payment methods --
WITH PaymentSums AS (
    SELECT 
        customer_id,
        payment_id,
        SUM(amount) AS amount
    FROM 
        payment
    GROUP BY 
        customer_id,
        payment_id
)
SELECT 
    customer_id,
    sum(CASE WHEN payment_id = 'Credit Card' then amount ELSE 0 END) AS credit_card_total,
    sum(CASE WHEN payment_id = 'Cash' THEN amount ELSE 0 END)  AS cash_total,
    sum(CASE WHEN payment_id = 'Debit Card' THEN amount ELSE 0 END) AS debit_card_total,
    sum(case when payment_id = 'paypal' then amount else 0 end) as paypal_total
FROm
    PaymentSums
GROUP BY 
    customer_id
ORDER BY 
    customer_id;

-- CTE and Self-Join Create a CTE to generate a report showing pairs of actors who have appeared in the same film together, using the film_actor table--
 WITH ActorPairs AS (
    SELECT 
        fa1.actor_id AS actor1_id,
        fa2.actor_id AS actor2_id,
        fa1.film_id
    FROM 
        film_actor fa1
    JOIN 
        film_actor fa2 ON fa1.film_id = fa2.film_id
    WHERE 
        fa1.actor_id < fa2.actor_id 
)

-- Final select to show the pairs of actors who have appeared in the same film
SELECT 
    ap.actor1_id,
    ap.actor2_id,
    COUNT(*) AS common_films
FROM 
    ActorPairs ap
GROUP BY 
    ap.actor1_id, ap.actor2_id
ORDER BY 
    common_films DESC;
    
-- CTE for Recursive Search Implement a recursive CTE to find all employees in the staff table who report to a specific manager, considering the reports_to column --

SELECT 
    staff_id,
    first_name,
    last_name
FROM 
   staff
WHERE 
    staff_id <>last_update 
ORDER BY 
    staff_id;
    --  
    WITH RECURSIVE EmployeeHierarchy AS (
    -- Anchor member: Select the specific manager
    SELECT 
        staff_id,
        first_name,
        last_name
    FROM 
        staff
    WHERE 
        staff_id = (store_id) -- Replace <specific_manager_id> with the actual manager's ID

    UNION ALL

    -- Recursive member: Select employees who report to the employees in the previous result set
    SELECT 
        s.staff_id,
        s.first_name,
        s.last_name
    FROM 
        staff_ s
    INNER JOIN 
        EmployeeHierarchy eh ON s.reports_to = eh.staff_id
)

-- Final select to display the employees in the hierarchy
SELECT 
    staff_id,
    first_name,
    last_name
FROM 
    EmployeeHierarchy
WHERE 
    staff_id <> (store_id) -- Exclude the manager from the results if desired
ORDER BY 
    staff_id;
